// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Rooms.DataAccess;

#nullable disable

namespace Rooms.DataAccess.Migrations
{
    [DbContext(typeof(RoomsDBContext))]
    [Migration("20220401091020_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Rooms.DataAccess.Contracts.Entities.RoomEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("about_tenant")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bed_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("can_couple")
                        .HasColumnType("bit");

                    b.Property<bool>("can_pets")
                        .HasColumnType("bit");

                    b.Property<bool>("can_smoke")
                        .HasColumnType("bit");

                    b.Property<string>("country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("floor_letter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("has_air_conditioning")
                        .HasColumnType("bit");

                    b.Property<bool>("has_elevator")
                        .HasColumnType("bit");

                    b.Property<bool>("has_internet")
                        .HasColumnType("bit");

                    b.Property<bool>("has_terrace")
                        .HasColumnType("bit");

                    b.Property<bool>("has_whashing_machine")
                        .HasColumnType("bit");

                    b.Property<bool>("is_furnished")
                        .HasColumnType("bit");

                    b.Property<bool>("is_vegan")
                        .HasColumnType("bit");

                    b.Property<string>("locality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("max_age")
                        .HasColumnType("int");

                    b.Property<int>("min_age")
                        .HasColumnType("int");

                    b.Property<int>("num_bath")
                        .HasColumnType("int");

                    b.Property<int>("num_roommate")
                        .HasColumnType("int");

                    b.Property<int>("num_rooms")
                        .HasColumnType("int");

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.Property<bool>("only_men")
                        .HasColumnType("bit");

                    b.Property<bool>("only_woman")
                        .HasColumnType("bit");

                    b.Property<int>("postcode")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.Property<string>("province")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("room_description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("room_size")
                        .HasColumnType("float");

                    b.Property<string>("street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("userId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Rooms", (string)null);
                });

            modelBuilder.Entity("Rooms.DataAccess.Contracts.Entities.UserEntity", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("about_me")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("phone")
                        .HasColumnType("int");

                    b.Property<string>("professional_area")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("studies")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Rooms.DataAccess.Contracts.Entities.RoomEntity", b =>
                {
                    b.HasOne("Rooms.DataAccess.Contracts.Entities.UserEntity", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
